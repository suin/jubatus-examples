{
    "http://qiita.com/suin/items/233e12462de68fcf302d": "Docker: MySQLのDBバックアップをDropboxに日次で保存する方法。suin/mysql-backup-dropboxは、MySQLのDBのオフサイトバックアップをラフに取りたいときに使うDockerイメージです。起動方法は次のように:なお、Dropbox APIのアクセストークンの取得方法はcurlコマンドだけでDropboxにファイルを保存する。例えばmysqldumpの結果など参照。",
    "http://qiita.com/suin/items/54ce152dd677d2dd6fd4": "docker-composeでPHP5.4〜PHP7.0まで単体テストする。次のようなYAMLを書いて、docker-compose upするだけ！平行して実行されたくない場合は、Makefileを作っておくといい。",
    "http://qiita.com/suin/items/696051df872ba8bd379f": "「オブジェクトの特異クラスをオープンしてそこにメソッドを追加する構文」。class << object構文「オブジェクトの特異クラスをオープンしてそこにメソッドを追加する構文」『プログラミング言語Ruby』にはこう書いてあった。毎回これ言うの大変…。誰か短い名前教えて ",
    "http://qiita.com/suin/items/e896332651fc1d600b6a": "dockerでmysqlコンテナを起動する。",
    "http://qiita.com/suin/items/7f6ffcf319acc172217b": "dockerのnginx-proxyの起動方法(開発環境用)。参考: VirtualHostをお手軽に実現できるDockerコンテナnginx-proxyの起動方法",
    "http://qiita.com/suin/items/00f0172438f7cffe935e": "dockerのログをローテートする。docker-composeでログローテとする方法",
    "http://qiita.com/suin/items/817910933202440ae1d3": "新規RailsプロジェクトをDockerで始める手順。新規RailsプロジェクトをDockerで始めようとすると結構大変なのでまとめておきます。ここでの説明はホストマシンをMac、DockerホストをLinux仮想マシン(docker-machine必須)として進めます。まず、dinghyをインストールして起動しておきます。\ndocker-compose.ymlを作るdbのcommandはわらわらと書いてますが、クエリーログをSTDOUTに出すためにしているので、クエリーログが不要ならcommand自体をはしょってもOKです。\nDockerfileを作るMySQLやPostgreSQLなどRails開発に必要そうなライブラリを同梱してONBUILDにも対応したイメージを@reoringが公開しているので活用します。ありがたや。\n適当なGemfileとGemfile.lockを作りますここまででディレクトリ構成はこうなっているはずです:\nRailsプロジェクトを生成するRailsのプロジェクトが生成され、ファイル構成はこうなります:\nRailsコンテナをビルドしなおすGemfileが出来たので改めてビルドしなおします。\nDB設定を書き換える環境変数からDB設定を受け取れるように書き換えます。\n環境を起動する\nウェブサイトにアクセスするhttp://rails.docker/ を開きRailsのデフォルト画面が表示されれば完了です。あとは忘れないうちに、生成されたRails関連のファイルをgitにチェックインしておきましょう。",
    "http://qiita.com/suin/items/0d177b702eb5ec3ca173": "RaspberryPi 3の音量をセットする方法。",
    "http://qiita.com/suin/items/b15f908aaf8023a8a1fc": "Python: オブジェクトのメソッド一覧を取得する。Pythonでオブジェクトのメソッド名を全て取得する方法です。dirを使った方法もコメントにて紹介いただきました。",
    "http://qiita.com/suin/items/b35b6b35eed61724366b": "ファイルの変更を検知してscpを実行するコマンド。ローカルで更新したファイルをサーバにアップロードしたい場合に使うコマンド。ローカルはmacOSを想定。\nfswatchをインストールしておくLinuxにはinotifywaitがあるが、macOSにはそれがないため、それ相当のツールであるfswatchをインストールする。\nファイルの変更を検知してscpを実行するコマンド\n実行例",
    "http://qiita.com/suin/items/687662259e93ac3de442": "dateコマンドで先週の月曜日の日付を取得する方法。macOSではつかえませんが、Ubuntuでは使えました。",
    "http://qiita.com/suin/items/36df6e80ce5aea389e59": "WordPressをdinghyで起動するdocker-composeファイル。WordPressコンテナをdinghyで起動するためのdocker-composeファイルです。",
    "http://qiita.com/suin/items/9458d211415ee6844abc": "WordPress:数字だけのパーマリンクに「-2」がつく問題を解消する裏技。WordPressパーマリンク設定で「投稿名」にすると、記事のパーマリンクを自由に設定できるが、「900」のような数字だけのパーマリンクは必ず「-2」がついて「900-2」のようなURLになってしまう。この問題を解決する裏技を紹介する。まず、「パーマリンク設定」を「基本」にしておく。次に、記事タイトルをパーマリンクにしたい番号にして「公開」しておく。記事を公開したら、再び「パーマリンク設定」に行き「投稿名」に設定変更する。その後、数字タイトルで投稿した記事にいくと、パーマリンクが「-2」なしのURLになっている。\nなお、その記事はタイトルを変更してもパーマリンクは変わらることがない。",
    "http://qiita.com/suin/items/0bfa07b7c29883beb50d": "svgをpngに変換するワンライナー。Imagemagicを使ってSVG形式をPNG形式変換する方法です。",
    "http://qiita.com/suin/items/98efbde507d970a01f32": "Capybaraでブラウザのウィンドウサイズをモニタに合わせて自動最大化する方法。SeleniumにはWindowを最大化するAPIとしてCapybara.page.driver.browser.manage.window.maximizeが存在していますが、問題点としてChromeとFirefoxで最大化時の幅が異なるという問題点があります。Chromeはページが十分に見える幅まで最大化するのに対して、Firefoxは画面いっぱいに最大化します。従って、クロスブラウザでウィンドウ幅を均一にするには、同じwindowオブジェクトに生えているresize_toメソッドを使うことになります。このメソッドはresize_to(幅, 高さ)を数値で指定するので、ここに画面の大きさを入れてあげればいいわけです。以下のコードはRSpecで画面幅を最大1024とし、それよりモニタが小さい場合、モニタの幅に合わせるようにしたコードです。モニタの幅や高さの算出はJavaScriptをブラウザに実行させています。最大幅を設定している理由は、最近のモニタは幅が1640だったりとウェブページとしては広すぎることもあるため、ウェブページとして広すぎない幅にするために設定しています。",
    "http://qiita.com/suin/items/36b97b73bb1fa163c433": "alerterはterminal-notifierでは不可能なアクション付き通知を出せるコマンドラインツール。macOSには通知センターがあり、Objective-Cを始めAppleScriptで通知を出すことができます。これらの言語以外で通知を出すとなると、Objective-Cで書かれたコマンドラインツールterminal-notifierを経由するようにすることが一般的です。\nterminal-notifierで出来ること・出来ないこと通知を出すだけであれば、terminal-notifierで十分です。URLを開いたり、コマンドを実行することもできます。terminal-notifierでできないことがあるとしたら、通知にアクションをつけることです。例えば、通知に「はい」「いいえ」のボタンをつけることや、返信メッセージを入力できるようにするなどです。\n通知にアクションを付けられるalerteralerterはterminal-notifierの類似コマンドラインツールで、macOSの通知を送信します。OS X 10.8以降をサポートしています。通知を送信できるだけでなく、通知が閉じられるまでプログラムをブロックし、通知がどのように閉じられたかを標準出力で返す機能があります。alerterで表示した通知は閉じられるまで表示され続けるという点は、terminal-notifierのデフォルトの挙動と異なります。したがって、通知にアクションを付け、その結果を踏まえてプログラムの処理を行ないたい場合は、alerterを活用すると便利です。\nalerterの特徴alerterには下記のような特徴があり、細かくオプションで設定することができます。\nalerterのインストールalerterのインストールはGitHubのリリースページからzipファイルをダウンロードし、解凍して出てきた実行ファイルalerterを~/binなどに配置します。HomeBrewでのインストールはまだできないようです。\nalerterで通知にアクションをつけるサンプルalerterにはさまざまなオプションがあり、ほぼ全てのオプションを指定したものが次のサンプルになります。\nalerterで通知に返信機能をつけるサンプル-replyオプションを指定すると、通知に対して返信メッセージを入力できるようになります。ただし、-replyは-actionsと組み合わせることはできません。\nおわりプログラムから通知を上げるには、terminal-notifierで十分なことが多いですが、通知にアクションを持たせたいときはalerterを使ってみると良いかもしれません。",
    "http://qiita.com/suin/items/cffb59ee52204bb143b4": "Docker for MacでCannot connect to the Docker daemon. Is the docker daemon running on this host?。既にdocker-machineなどを使っているMacにDocker for Macをインストールして、docker psを実行したとき、「Cannot connect to the Docker daemon. Is the docker daemon running on this host?」というエラーが出たら、環境変数DOCKER_HOSTを削除するとエラーが起きなくなります。おそらく、docker-machineを使っている場合、ご自身でbashrcなどにDOCKER_HOSTを定義している場合があると思います。bashrcなどを書き換えて、DOCKER_HOSTを取り除くと、エラーが起きなくなります。",
    "http://qiita.com/suin/items/2fef6af0a81244b76787": "CakePHP2: JSONを返すコントローラを実装する。CakePHP2ではアクションが終わるとビューの描画に処理が移ってしまう。JSON APIを実装する場合はビューが不要なので、そうならないために、autoRenderやautoLayoutの値をfalseにしておく。また、Content-Typeはapplication/jsonにしたいので、response->type()でJSONを指定しておく。各アクションにこれらの設定を書いてもいいが、コントローラにJSON APIのエンドポイントのアクションしかない場合は、beforeFilterで宣言しておくと重複して書かないで良いので楽。",
    "http://qiita.com/suin/items/5410470d05f1f045e64e": "xhyveは「エックスハイブ」と読めばいいようだ。xhyveはどう発音したらいい？xhyveの発音というか読み方がわからないので、ネイティブがどう発音しているかYouTube動画をさぐってみた。結論としてはxhyveは「エックスハイブ」と読めばいいようだ。発音を参考にしたYouTube動画 → CoreOS June Hangout - xhyve, Kubernetes and CoreOS Security - YouTube",
    "http://qiita.com/suin/items/dd7201053e9b227779ba": "JavaScriptの整数の精度が保たれるのは9007199254740991まで。Javascriptの整数の精度が保たれるのは2の64乗ではなく、2の53乗までらしい。なお、9007199254740991はNumber.MAX_SAFE_INTEGERで定義されています。これは、JavaScriptには、整数型がなく全て浮動小数点型で表現されるためのようです。JavaScriptの浮動小数点型はIEEE 754に準拠していると思われます。64ビット倍精度IEEE 754 - Wikipediaより",
    "http://qiita.com/suin/items/be87a7a581f30b38c5f7": "OSX:開発環境のオレオレSSL証明書をChromeやSafariに信頼させる。どうしてもHTTPSでないとならない開発環境では、オレオレSSL証明書を入れてHTTPSでアクセスできるようにすることがありますが、オレオレ証明書はそのままではブラウザに信頼されていないため「信頼できない接続です」といったエラーが出て、サイトが見れない状態になります。このような場合、大抵のブラウザでは、無視して閲覧するオプションがありますが、今回は、証明書をMac OSXのChromeやSafariに信頼させることでこうしたエラーを回避する方法を紹介します。Firefoxと違い、ChromeやSafariは、ブラウザ単体では信頼するSSL証明書の追加ができません。そのためOSXでは、KeyChain Accessに証明書を追加し、信頼してあげる必要があります。\nKeyChain Accessに証明書を追加・信頼する手順信頼したい証明書をダブルクリックで開きます。証明書の追加ダイアログが出るので、「Keychain」で「System」を選び「Add」を押して証明書を追加します。これだけでは証明書と追加しただけで、信頼はしていないので、Applications → Utilities → KeyChain Accessアプリを立ち上げ、たった今追加した証明書を探します。見つけたら、ダブルクリックして開きます。開くと、証明書の詳細が出てくるので、その中の「Trust」を開き、「When using this certificate」の設定を「Always Trust」に変更し、閉じます。 以上で、ChromeやSafariでオレオレ証明書が信頼されるようになります。",
    "http://qiita.com/suin/items/024e2816b28140173ec2": "OSX: ffmpegでDVD動画ファイル.vodを.mp4に変換するワンライナー。HomebrewでインストールしたffmpegでDVDの動画ファイル.vodを繋げて、1つのmp4ファイルに変換する方法です。",
    "http://qiita.com/suin/items/0c8e9dbd070d16a146da": "nginxでメンテナンス中ページを出すだけのサーバを立てる方法。AWSでプロダクション環境をメンテナンスするときに、一時的にメンテナンスページを表示する方法です。ここでは、ELBとEC2をつかったやりかたを紹介します。ここで紹介する方法の他にもRoute53とS3を組み合わせて、自動でDNSフェイルオーバーすることで、メンテナンスページを出す方法もありますが、「AWS ソーリーページ Route53 S3」などで検索するとたくさん情報があるので、サーバレスのソーリーページの実現方法はそちらに譲りたいと思います。ここで紹介するEC2でメンテナンスページを出す方法としては、という手動運用で行われる計画停止を前提としています。\nソーリーサーバの構築AWS公式のUbuntu AMIから適当に1台、EC2のインスタンスを起動します。つぎに、nginxをインストールします。\nソーリーサーバのファイル構成ファイル構成としては、必要最低限にするのがポイント。ファイルが見つからなかったら、503レスポンスを返すため。\nソーリーサーバのnginxの設定デフォルトのサイト設定 /etc/nginx/sites-enabled/default を3箇所書き換えます。以上でソーリーサーバの構築は完了です。",
    "http://qiita.com/suin/items/344a1c9eb6b611f858cf": "iOSアプリのHTTP通信を傍受してデバッグに役立てる。iOSアプリを開発していると、iOSアプリ/サーバ間のHTTP通信を見たいことがあります。ここでは、MacでHTTPプロキシを立てて、HTTP通信の内容を見られるようにする方法を紹介します。\n必要なもの\nMac側の準備\niOS側の準備\niOSアプリの通信内容を見るMac・iOSともに準備が終わったら、目的のiOSアプリを起動して通信を発生させると、Proxy.appに通信内容が表示されます。Proxy.appで見れる通信内容",
    "http://qiita.com/suin/items/4182b20947ae4cd0ab31": "不具合報告の書き方参考リンク。優れたバグ報告に必要なこと | 情シスハックエンジニアに分かりやすくバグを報告するバグレポートの書き方 | 株式会社LIG新社会人のためのバグレポートの基本 - mixi engineer blogBug writing guidelines - Mozilla | MDNWriting Better Bug ReportsHow to Write a Good Bug Report?",
    "http://qiita.com/suin/items/abb7de5ce5fa0b4b96cb": "git pushでVPSにデプロイするには`git config receive.denyCurrentBranch updateInstead`で。git pushでVPS上のHTMLを更新する方法です。通常、gitではリモートはbareリポジトリにし、そこに対してローカルからgit pushします。bareリポジトリはgitの変更履歴等のみを保持するリポジトリで、チェックインしたファイルがそのまま配置されるわけでないです。scp的な感覚でgit pushしてリモートのコードを変更したい場合は、non-bareなリポジトリをリモートに作ります。\n前提前提として、複数人でgit pushしない運用になっていることです。git config --add receive.denyCurrentBranch ignoreはどう危険なのか - 西尾泰和のはてなダイアリーを参照。個人的なサイトであれば問題ないと思います。\nリモートにnon-bareなリポジトリを作るreceive.denyCurrentBranch updateInsteadをセットしておかないと次のようなエラーになりgit pushできません。\nローカルからpushするここのexample.com:/var/www/sites-available/example-site.comの部分は、ホスト名:.gitがあるディレクトリのパスにします。ホスト名の部分は、ローカルマシン(OSXなど)の$HOME/.ssh/configに設定したホスト名です。\nまとめ",
    "http://qiita.com/suin/items/43c0e0e74205e0380966": "pushdとpopdとcurrent directoryの関係を分かりやすく表現する工夫。pushdはcdのように指定したディレクトリにcurrent directoryを変更するコマンドですが、pushdする前のディレクトリを記憶していて、pushdの後にpopdすると一個まえのディレクトリに戻れる便利コマンドです。タスクをシェルスクリプトで自動化するときに、pushdとpopdを組み合わせると便利ですが、シェルスクリプト上で多重pushdをするとcurrent directoryがどこなのか分かりにくくなってしまいます。また、pushdにどのpopdが対応しているかも見えにくくなったりもします。current directoryがどこなのか分かりやすくする工夫として、コマンドにインデントをつける方法が考えられます。この書き方の難点としては、エディタによっては自動インデントがうまく行かなかったり、IDEによってはインデントがフラットに勝手に直されてしまうことがあるのと、pushdとpopdの対応が他のコマンドに埋もれてしまって認識しにくい点が改善されていないことです。こういった場合は、Bashの複合コマンド{}と&&オペレータを使って書くと、インデントでcurrent directoryが多少把握しやすくなるとともに、pushdとpopdの対応づけも出来て良さそうです。",
    "http://qiita.com/suin/items/fb58426e6c1eaa2b8e18": "docker: dinghyでmysqlを立ててSequelProでつなぐ方法。OSXでdockerを使いたいだけならVagrantを捨てdinghyを使ってみるといいかもしれないで紹介したdinghyで、MySQLコンテナを起動し、そのDBにSequelProからアクセスする方法です。\ndocker-composeの設定\nSequelProの設定ちなみに、ログを出すにはDocker: MySQLのクエリーログを確認できるようにしたい - Qiitaを参照",
    "http://qiita.com/suin/items/c2ef8ff06b844be656cc": "OSXでdockerを使いたいだけならVagrantを捨てdinghyを使ってみるといいかもしれない。OSXでdockerを使った開発環境を組もうとすると、docker入りのVagrant boxを自作しないとならなかったり、docker-machineのファイル共有をセットアップする必要があったりと、開発を始めるまでの手間が多い。dinghyは上記のような手間を省略し、OSXとdocker環境をシームレスにしてくれるプロダクトで、次の特徴がある。\n導入方法Docker三種の神器を入れておく。dinghyも入れる。あと、Virtualboxも入ってなければ入れておく。\ndinghyの仮想マシンを作る仮想マシンを作る:しばらくすると仮想マシンが起動するので、docker用の環境変数をdinghyで調べてセットする。環境変数のセット:ホストマシンでdocker psを実行してみる。今回は、証明書がinvalidになっていたので、証明書を再作成して解決。証明書の再作成:参考: x509 certificate error on switching networks · Issue #136 · codekitchen/dinghydocker imagesで調べると、既にdinghyのリバースプロキシが入っている。\ndocker-composeでファイル共有をやってみるホストマシン上のファイルをdockerコンテナに共有するためのdocker-composeの書き方を試してみる。今回はPHPのコンテナを起動してみる1。ホストマシン側に共有するコードを作っておく。docker-composeの設定を書く。ポイントは、volumesのホストマシン側のパスは相対パスにしておくこと。ちなみに、exposeのポート番号とenvironmentのVIRTUAL_HOSTをセットしておくことで、dinghyがDNSにそのホスト名を登録してくれるので、ホストマシンからはそのホスト名でアプリにアクセスできるようになる。http://php.docker/ にアクセスするとPHPの情報が表示される。ファイルを追加してみる:http://php.docker/server.php にアクセスすると追加したプログラムの実行結果が表示される。\nおわりdinghyを使うことでVagrantをメンテしなくて良くなる。Vagrantまわりで苦労している場合は、dinghyを試してみてはいかがだろうか。\n参考ファイル共有を試すだけならnginxでもよかったが、公式のnginxイメージはサーバ名がlocalhost固定で、dinghyが発行するサーバ名に対応するのが面倒だったのでPHPのビルトインサーバを使うことにした。 ↩",
    "http://qiita.com/suin/items/e8f8c07658d04fa77958": "ズンドコキヨシ with Makefile。Makefileの再帰呼び出しでズンドコキヨシ。",
    "http://qiita.com/suin/items/21fe6c5a78c1505b19cb": "MySQLの外部キー制約RESTRICT,CASCADE,SET NULL,NO ACTIONの違いは？。MySQLの外部キー制約RESTRICT,CASCADE,SET NULL,NO ACTIONの違いを把握するため、実際の挙動を確認してみます。\nまとめ結論を先に書いておきます。以下はやってみた検証の内容です。\n検証用テーブル検証用テーブルを作ります。\nON UPDATE RESTRICTUPDATEすると、エラーになります。\nON UPDATE CASCADEUPDATEしても、エラーにならず、小テーブルは親テーブルの変更に追従します。\nON UPDATE SET NULLUPDATEしても、エラーにはならないが、items.category_idにはNULLがセットされる。\nON UPDATE NO ACTIONON UPDATE RESTRICTと同じ結果です。\nON DELETE RESTRICT\nON DELETE CASCADEカテゴリの削除は成功し、そのカテゴリを参照しているアイテムも同時に消えます。\nON DELETE SET NULLカテゴリのDELETEは成功し、それを参照するアイテムのcategory_idはNULLになります。\nON DELETE NO ACTIONON DELETE RESTRICTと同じ結果になります。",
    "http://qiita.com/suin/items/25cc0e9d6670a62f4d8e": "SequelProでER図を出力する方法。MySQLのMac用GUI無料クライアントのSequel ProでER図を出す方法です。こんな感じのER図が出せます。\ngraphvizを入れとく\ndotファイルをエクスポートするSequel Proで File > Export… > Dot を出力形式で選択 > Export。\ndotファイルをpngに変換する以上。\n今回使ったDBのDDLちなみに今回出力してみたDBのDDLは次になります。",
    "http://qiita.com/suin/items/8d33b0fab1bdb6b625af": "Rubyに触れてみる【1日目】。Rubyプロジェクトに関わりそうなので、Rubyに触れて学んだことを逐次書いていこうとおもいます。\n筆者のバックグラウンド\nRubyを最新にするRubyのバージョンを確認してみる。2.2.3、2015年8月15日のものらしい。このRubyはMacビルトインのものだろうか？Homebrewで入れたものだろうか？どうやら、Homebrewで入れていたものらしい。きっと、Ruby系のDevOpsツールを入れた時に同時に入っていたものだろう。アップグレードしてみる：2.3になった。今日時点で最新と思われる。\nCodeRunnerのRubyバージョンを確認するこちらも2.3.0になっている。\n他の言語の知識を活用するプログラミングが初めてでなければ、他の言語と比較した記事が役立つと思う。PHPer向けのRuby入門 - Qiita[Ruby]他言語使用者のためのRuby入門知識まとめ - Qiita一通り目を通して、予習する。\n出力系関数を確認するRubyコードスニペットを書きながらRubyを体に叩き込む。そのために、まずは出力系関数を確認する。文字列出力には、puts、変数をダンプするにはpを使うと良いようだ。\nRuby 2.3の言語仕様を読む体系的に言語仕様を知っておきたいので、Hello Worldから始まる入門書ではなくリファレンスを読んでみる。オブジェクト指向スクリプト言語 Ruby リファレンスマニュアル (Ruby 2.3.0)。\nRubyの特徴はじめに (Ruby 2.3.0)を読む。PHPやJSと似てると見える。ScalaやGoとは違う。ふむふむ。今までやってきた言語にもありそうなやつだな。この辺はVagrantfileのDSLなどでお世話になってます。おお、これはどういうことだろう！後で変数名の仕様を確認しよう。初めて聞く用語。JSとかでオブジェクトにメソッド生やしたりしていたけれど、それと同じものだろうか？ScalaやPHPのtraitとはどう違うんだろう？この辺は想像がつかないので後で確認しよう。\n変数と定数「変数の種類(ローカル変数、グローバル変数、インスタンス変数など)は 変数名から知る事ができます。」というのが気になったので、早速「変数」について見てみる。変数と定数 (Ruby 2.3.0)Rubyには変数名に次のルールがあるらしい。またクラス定義式はクラスオブジェクトの生成を行うと同時に、 名前がクラス名である定数にクラスオブジェクトを代入する動作をします。クラスの定義は定数的なものなのか！つづく",
    "http://qiita.com/suin/items/52c4a653cba7acb694b4": "Smarty3でnl2brしつつXSSを避ける書き方。Smarty3で改行を含むユーザ入力テキストを、画面に出すときは<br>で改行して出してあげたい、そんな場合にnl2brとnofilerを使うといいのですが、普通の書き方をするとXSSの脆弱性になりえます。\nXSSできてしまう書き方\nXSSできない書き方闇コードっぽい・・・",
    "http://qiita.com/suin/items/cdf67fcdfcf28363f7cc": "CS-Cart: Smartyでグローバルに使える変数を追加する。CS-Cartのテンプレートでどこでも使える変数を追加する方法です。\nフックを設定するテンプレート初期化フックにかんで、Smartyプラグインを登録するコードを実装します。\n関連CS-Cart: Smartyプラグインを追加する方法 - Qiita",
    "http://qiita.com/suin/items/455f152be85c0704a48c": "PHP:ホワイトリストやブラックリストで配列からキーを削除する。PHPの連想配列からホワイトリスト方式やブラックリスト方式でキーを削除する方法です。\nホワイトリストで配列からキーを削除する出力結果\nブラックリストで配列からキーを削除する出力結果",
    "http://qiita.com/suin/items/269bf7ed77ef36e9be3a": "CS-Cart:ブロックのキャッシュを無効にする。CS-Cartでファイルのブロックテンプレートを変更している時、ブロックのキャッシュが有効になっていると、すぐに反映されなくて開発しにくい。ブロックのキャッシュを無効にするには、config.local.phpもしくはlocal_conf.phpに下記の宣言を行う。関連CS-Cartでデバッグモードを有効にする - QiitaCS-Cart: テンプレート・翻訳・Add-onの更新方法 - QiitaCS-Cartのテンプレートキャッシュを更新する - QiitaCS-Cart:キャッシュがクリアされない問題 - Qiita",
    "http://qiita.com/suin/items/8fff332b3308e07a4b10": "CS-Cart:商品リスト形式のテンプレートまとめ。CS-Cartの商品リスト形式のテンプレートの一覧です。テンプレート名を忘れた時にご活用ください。\n商品(products_list.tpl)\nリンク付きサムネイル(links_thumb.tpl)\nグリッド(grid_list.tpl)\nスクローラー(blocks/products/products_scroller.tpl)\nサムネイル小(small_items.tpl)\nテキストリンク(blocks/products/products_text_links.tpl)\nショートリスト(compact_list.tpl)",
    "http://qiita.com/suin/items/4f951d2b1655e4e5abe2": "PHP:平日だけのリストをDatePeriodで求める。DatePeriodとNフォーマットとarray_filterを使うと特定の期間の平日だけのリストを求めることができる。出力結果DatePeriodはDateTimeとDateIntervalを使う以外に、ISO 8601 のRecurring time intervals書式でインスタンス化することができる。ISO 8601では開始日〜終了日を指定した書式は'開始日時/終了日時/間隔'となる。なお、期間は開始日時以上、終了日時未満になるので、最終日も含めたい場合は、終了日時を0時0分1秒以後の時刻にする必要がある。したがって、上のコードでは3月31日の0秒ちょうどを含めるために、終了日時を3月31日の1秒にしているわけである。ちなみに、Rnで繰り返し回数を指定することもできる。下記の反復形式は同じ意味になる。元ネタ：DateTimeクラスで平日のリスト - Qiita\n参考: PHP: DatePeriod::__construct - Manual",
    "http://qiita.com/suin/items/3cd9476983615098b27a": "CS-Cartのタブコンポーネントを使う。CS-Cartでタブコンポーネントを使う方法です。",
    "http://qiita.com/suin/items/793d06f708041c534ca1": "JavaScriptで描画された<a>タグも含めてページ内のリンクをすべて取得したい。wgetでサイト全体をミラーダウンロードする方法を紹介しましたが、JavaScriptゴリゴリのページはこの方法ではうまくいきません。これはwgetがJavaScriptを解釈しないためです。例えば、次のようなHTMLではwgetはリンク先を見つけることができません。この場合、WebDriverと実ブラウザを使ってJavaScript実行結果を取得するプログラムを実装する必要があります。以下は、JavaScriptで描画された<a>タグも含めてページ内のリンクをすべて取得するRubyのサンプルコードです。",
    "http://qiita.com/suin/items/7241135f1684636652ac": "wgetでサイト全体をミラーダウンロードする。\nパラメータの説明\n認証しないと閲覧できないコンテンツがある場合認証しないと閲覧できないページがある場合、セッションIDが含まれているCookieヘッダを追加する。関連",
    "http://qiita.com/suin/items/c3e5b257208c724b7bde": "tmuxinatorが起動しない: Could not find 'tmuxinator' (>= 0) among 11 total gem(s) (Gem::LoadError)。Homebrewで入れたRubyを2.3にアップグレードしたら、tmuxinatorが起動できなくなりました。エラーメッセージ:解決策: tmuxinatorを入れ直す",
    "http://qiita.com/suin/items/cbdaa017f726436163b4": "PHP: 5行でテンプレートエンジンを作る。\n欲しいものというテンプレートとという変数を渡すとという文字列を返してくれる関数が欲しい。RubyやPythonなら、sprintfや%でかけちゃいますが、PHPはそういう関数がないんですよね・・・。Output Buffer Filterと<?=を組み合わせたり、文字列の変数展開とextractを組み合わせたりすればPHPでも近いことはできますが、ハック感があるので今回は文字列操作の関数だけで実装してみました。\n関数の実装使い方",
    "http://qiita.com/suin/items/66597d51a2f250aaac7a": "CS-Cart: ボタンコンポーネントを使う。CS-Cartでは、buttons/button.tplテンプレートを使うと、テーマのボタンコンポーネントを描画することができます。\n例1出力結果\n例2出力結果",
    "http://qiita.com/suin/items/074a43d34a4e2aad42de": "CS-Cart:frontendのページタイトルを設定する。CS-Cartでfrontendの<title>タグに任意の文字列を設定する方法です。\n<title>タグの内容だけを設定する\nパンくずと<title>タグの同時に設定する",
    "http://qiita.com/suin/items/3021cefa19a122807f6c": "PHP:オブジェクトからネームスペースを取り除いたクラス名を取得する関数。Foo\\Bar\\Buzクラスのインスタンスから\"Buz\"を求める関数です。いろんな実装方法があるのですが、結論から言うと読みやすさと速さの観点から(new \\ReflectionClass($obj))->getShortName()が一番良さそうです。\n実装1: クラス名をファイルパスに見立ててbasenameで調べるhackeyなパターン\n実装2: 一度配列にして取り出すパターン\n実装3: リフレクションで調べるパターン\n実装4: 文字列のオフセットで切り取るパターン\n速さのベンチマークどれが良いかよくわからないので、速度を比較してみる。結果は、リフレクションが一番早いけれど、有意差があるかは不明だが、get_classが遅いんじゃないかという仮説がたちました。get_classはリフレクションより早かったです。",
    "http://qiita.com/suin/items/c524cf84368332db426b": "PHP:連想配列をキーでグループ化する。例えば、こういう食べ物の連想配列をカテゴリごとにグループ化して、こんな感じにしたい:\n実装案1: foreachを使ったよくある実装\n実装案2: イミュータブル風変数スコープとコレクションのAPI、辛すぎ・・・。やはりPHPはforeachを使うが良さそう。\n実装案3: 先に入れ物を作ってforeachでミューテート実装案1と比べて、if-elseが無くなった。まずまずと言った感じ・・・？",
    "http://qiita.com/suin/items/25edb2417f7a36caf657": "Imagemagickでテキストを書くコマンド。Imagemagickでテキストを書くコマンドです",
    "http://qiita.com/suin/items/ca05699cd03411ee4bdc": "PHPで動的n次元配列追加をしたいです。 preg_replace_callbackで。。PHPで動的n次元配列追加をしたいです。 例え… - Qiita",
    "http://qiita.com/suin/items/d1fc9e1ae3e255ae3b37": "User-Agent分岐無しに日本語ファイル名でファイルをダウンロードさせる (理論編)。ファイル名を日本語でダウンロードさせるためには、User-Agentを見てContent-Dispositionヘッダのfilenameの書式や文字コードを書き換える方法1がよく知られていますが、今回はUser-Agentに頼らず日本語ファイル名ダウンロードをクロスブラウザ対応する方法を紹介したいと思います。\n概要\nブラウザはファイルを保存するとき、何を参考にしているか?ブラウザがウェブ上のリソースをローカルに保存するとき、必ずファイル名をつけるわけですが、そもそもブラウザは何を参考にして、ファイル名を決めているのでしょうか?第一に考えられるのが、HTMLなら<title>タグの文字列 + .htmlです。第二に、HTMLでない場合、たとえば画像ファイルはURLに含まれるファイル名です。最後に、Content-Dispositionヘッダのfilenameの値です。他にもあるかもしれませんが、大まかにこの3つのどれかになるわけです。ここで着目したいのは第二のファイル名決定の仕様です。上の例では、英語のファイル名 Web-browser_usage_on_Wikimedia.svg でしたが、URLにはURLエンコードさえすれば日本語を含めることができるので、日本語ファイル名をURLのパスに含めてしまうという発想です。\n$_SERVER['PATH_INFO']の利用PHPでは、PHPファイル名の後ろにスラッシュをつけるとそれ以降からクエリストリングの手前までのパスを、$_SERVER['PATH_INFO']に格納してくれるという仕様があります。たとえば、http://example.com/index.php/foo/bar/buz?hoge=123にアクセスした場合、index.phpでは$_SERVER['PATH_INFO'] = '/foo/bar/buz'がセットされます。この仕様を活用して、PATH_INFOにダウンロード用ファイル名をセットすればいいわけです。たとえば、index.php/請求書-2016年02月-1432.pdf?invoice_id=1432といったURLでPDFを生成してあげれば、ブラウザはそのPDFを請求書-2016年02月-1432.pdfとして保存してくれます。サーバ側のindex.phpはPATH_INFOの値は無視してもいいですが、URLはユーザが決められるので、もし勝手にファイル名をつけてほしくない場合は、$_GET['invoice_id']をキーにとってきた請求データと比較して、開発者が意図したファイル名と同じか、PATH_INFOをチェックしてもいいです。\nサンプルコード: 日本語ファイル名で保存する例次のサンプルコードは、ウェブ上のリソースを任意のファイル名で保存する例です。ご覧いただけるとわかりますが、User-Agentによる分岐はありません。このサンプルの使い方ですが、http://example.com/download.php/[ファイル名]?file=[リソース名]といったURLにユーザをアクセスさせて使います。ファイル名はダウンロード時のファイル名を指定し、リソース名にはURLからプロトコルを除いた部分を指定します。2たとえば、ユーザにQiitaのMarkdown記法 チートシートのMarkdownファイルをダウンロードさせたいなら、下記のようなURLにアクセスさせます。このURLにアクセスした、ブラウザの挙動は次のようになります。Google Chromeは問題なく意図したファイル名で保存されました。Firefoxも問題なさそうです。Safariも大丈夫です。懸念のIE11も問題なさそうですね。\nURLエンコードの注意点注意点として、日本語ファイル名をURLに含める以上、URLエンコードする必要があるわけですが、エンコードする関数はrawurlencodeを使うという点です。urlencode関数を使ってしまうと半角スペースが+にエンコードされますが、ファイル名にそのまま+が現れてしまうからです。\nルーターを使えばURLはもっとすっきりする今回 紹介したサンプルコードではクエリストリングからファイルのリソースを探す実装になっていましたが、MVCフレームワークのルータを使えば、URLがもっとすっきりしたものになるかと思います。たとえば、Silexで次のようなルーティングを設定しておけば、/invoices/1432/請求書-2016年02月-1432.pdfといったURLでファイルをダウンロードさせることができます。\nおわり今回は、User-Agentで分岐しない日本語ファイル名ダウンロードの方法を紹介しました。検証したブラウザは多くないので、うまく動作しないブラウザはご報告いただけると助かります。続き: User-Agent分岐無しに日本語ファイル名でファイルをダウンロードさせる (完全版)[日本語ファイル名対応] 簡単にファイルをダウンロードさせられる関数 - Qiita ↩このコードはあくまで日本語URLを簡単に試せるよう、「ファイルの内容をとってくる処理」の部分はどんなURLからでも取得してくるようにしていますが、実際はもっと制約的な実装の方が安全です。実践的な実装は@mpywさんのUser-Agent分岐無しに日本語ファイル名でファイルをダウンロードさせる (完全版)をご覧ください。 ↩",
    "http://qiita.com/suin/items/7a8d0979b7675d6fd05b": "PHPExcelでエクセル出力入門。PHPExcelでエクセルを出力する方法を紹介していきます。なお、ここで紹介するPHPコードはGitHubのsuin/phpexcel-playground: PHPExcelの遊び場で公開しています。\nPHPExcelとは?PHPExcelとは、Excel95、Excel2007等のエクセルファイルを読み書きすることができるピュアPHPのライブラリです。WindowsやExcelが必要ないため、Linux環境だけで完結するのが特徴です。\nPHPExcelのインストールComposerでインストールする\n空っぽのExcelを出力するプロパティだけを持った空っぽのエクセルを出力してみます。出力結果\nセルに値を入れる出力結果\n数式をセルに書く数式も値と同様に、setCellValueに文字列として渡すことで書き込むことができます。出力結果\nシートに名前をつける出力結果\nxlsとxlsxを出力するExcel 97〜Excel 2003のxls形式と、Excel 2007以降のxlsx形式を出力する方法です。\nExcelをダウンロードできるようにする出力したExcelをダウンロードできようにするには、HTTPヘッダにContent-Type: application/vnd.ms-excelとContent-Dispositionを設定して、出力先をphp://outputにします。なお、日本語ファイル名でダウンロードさせる際は、User-Agent分岐無しに日本語ファイル名でファイルをダウンロードさせる (理論編)をご参考に。\n範囲を指定して罫線を引く出力結果\nテンプレートから出力するSUMなどの数式や罫線などをあらかじめ仕込んだ「03-見積書テンプレート.xltx」というテンプレートを作って、テンプレートのセルに値を入れていく例です。 03-見積書テンプレート.xltxをダウンロード出力結果\n大量の行を書いてみるPHPExcelがどの程度メモリを使うのか調べてみます。エクセルは最大1,048,576行までも持てますが、今回は100,000行の範囲で、1行に「あ」を32文字ずつ書いてメモリ使用量を調査してみます。結果1万行あたり、10~20メガバイトほど消費するようです。\n範囲を選択してコピー&ペースト罫線・セル結合・値などが入ったテンプレート「07-交通費精算書テンプレート.xlsx」の明細を増やしていって、複数の交通費精算が記載されたエクセルを出力するサンプルです。下図がそのテンプレートです。 07-交通費精算書テンプレート.xlsxをダウンロードPHPExcelには範囲を選択してコピペするAPIがないため、PHPExcelで行のコピー : 時々、失業SEの開発日誌で紹介されているコードを活用します。出力結果\nブック全体のデフォルトフォントスタイルを設定する出力結果\nセル背景色を塗る出力結果: ちゃんと塗れます。\n生成したExcelをPDFに出力するPHPExcel自体にはPDF生成ライブラリがないので、composerで次の3つのライブラリのうち、どれかをインストールしておく。次のサンプルは、これら3種類のPDF出力ライブラリと、LibreOfficeのCUIを使ってPDFを生成するものです。出力結果PDF変換前のExcelです：tcPDF:Dompdf:mPDF:LibreOfficeのCUI:tcPDF, Dompdf, mPDFについては日本語フォントをちゃんと指定すれば、文字化けせずに出力出来そうですが、やり方がよくわかりませんでした。Excelのシートに限りなく見た目を同じにしたい場合は、LibreOfficeのCUIを使うのが良さそうですが、式の計算結果が印字されないバグ？があるようです。\nおわり他にも追記していこうと思います。",
    "http://qiita.com/suin/items/2801e2715a2c4eab15ce": "CS-Cart:キャッシュがクリアされない問題。CS-Cartでアドオンを開発しているとキャッシュをクリアすることがありますが、なぜかキャッシュがクリアできない問題に遭遇しました。CS-Cartのキャッシュクリア機能は最終的にfn.fs.phpのfn_rm関数を呼んでいるのですが、実装が「ひとつでもファイル削除失敗したら中断する」ようになっています。中断されても、画面には「お知らせ キャッシュがクリアされました」とあたかもうまくいっているようなフィードバックがありますが、嘘っぱちです(苦笑)。fn_rm関数を見てみましょう。ファイルでだったらunlink、ディレクトリだったら子ファイルを再帰呼び出しでunlinkしてからディレクトリをrmdirするといった、PHPあるあるなコードになっています。しかし、よく見てみると、ディレクトリ内のファイル削除がひとつでも失敗したらreturn falseして処理を中断するようになっています。こうなってしまっては画面からのキャッシュクリアはできませんので、コマンドでさくっと削除してしまいましょう。",
    "http://qiita.com/suin/items/ee483fbe015513808cee": "CS-Cartアドオン開発逆引きTips。CS-Cartアドオン開発で役立つかもしれないTips集です。\n開発着手時に知っておくことinstallディレクトリの削除をgitで無視するテンプレート・翻訳・Add-onの更新方法CS-Cartでデバッグモードを有効にするコアの挙動を変える4つの方法まとめPHPフックで呼び出される優先度を指定する\n認証・認可・権限ユーザ名でログインできるようにする現在ユーザのユーザ情報を取得する自前コントローラをアクセス権限制御する出品者(vendor)に管理画面のコントローラアクセス権限を与える\nコントローラ・機能追加Addonでコントローラを追加して管理画面を作る\n通知通知関数fn_set_notificationの使い方\nDB・SQLCS-CartのDBからデータを取得するAPIまとめCS-CartのSQLプレースホルダの挙動CS-CartをInnoDB化してトランザクションもやる\nテンプレート\n共通CS-Cartのテンプレートキャッシュを更新するCS-Cartでタイムスタンプを日付フォーマットにして表示する方法Smartyでグローバルに使える変数を追加するSmartyプラグインを追加する方法Add-onでコアのテンプレートを上書き(override)するブロックのキャッシュを無効にする\nフロントエンドfrontendのページタイトルを設定するボタンコンポーネントを使うタブコンポーネントを使う商品リスト形式のテンプレートまとめ\nバックエンド管理画面にメニューを追加する方法ステータスを表示だけする方法(選択・変更できないようにする)管理画面で独自のバリデータを定義する\nアセット(JavaScript・CSS・画像)AddonのJavaScriptをリロードで反映するようにする全ページでJavaScriptを読み込みたいAddonにJSやCSSファイルを同梱するアドオンの画像を配置する場所と画像の表示方法\n多言語対応・翻訳翻訳の文中に変数を使う日本語版は「姓」がfirst name「名」がlast nameになっているCS-Cartの言語変数.poファイル更新を適用する方法\nセキュリティCSRF対策のsecurity_hashを取得するAPI\nデバッグエラーをログに出したり、Slackに通知したりするデバッグ用にメールの送信先を固定するコントローラにPOSTするために最低限必要なリクエスト\nトラブルシューティングキャッシュがクリアされない問題",
    "http://qiita.com/suin/items/ca14c4768fc8547df3c1": "CS-Cart:自前コントローラをアクセス権限制御する。ここでは、CS-Cartのアドオン開発時に追加したコントローラへのアクセス権限をどうやって制御するか説明します。\nCS-Cartにはアカウントタイプが3つあるCS-Cartには管理者(A)、出品者(V)、お客様(C)の3種類のアカウントタイプがあり、何もしなくても最低限、以下のアクセス制御をしてくれます。\nコントローラ単位でのアクセス制御CS-Cartでは管理画面のユーザグループで権限を設定できることからわかりますが、コントローラ単位でのアクセス制御も行うことができます。ただ、サードパーティのアドオン側が「ユーザーグループ」の「権限」に権限を足す方法や、アクセス権限のロジックについては一切ドキュメント化されておらず、ソースコードから手探りで仕様を確認することになりました…。冗談きついなぁ。下記が、アクセス制御フローの概要です。ご覧のとおり、分岐が複雑ですが、という風に覚えておけば差し支えないかと思います。\nサードパーティアドオンの権限項目を追加する方法まず、CS-Cartがどのように「ユーザグループ」の「権限」に権限項目を出しているかですが、単純に、cscart_privilegesテーブルのデータを見ているだけです。cscart_privilegesテーブルのprivilegeは権限名。is_defaultはデフォルトで権限を付与するかどうか。section_idは、「権限」のUIのどのセクションに出すかの指定です。つまり、自分が作っているアドオンで権限項目を追加するには、このテーブルに行を足せばいいわけですが、インストール時に権限項目が追加されるよう、addon.xmlにSQLを書いておきます。以下はmanage_hogehogeという権限を追加する例です。なお、manage_hogehogeなどの文字列はなんでもいいですが、他の権限項目を見てみるとmanage_{コントローラ名}といった命名規則になっているようです。配布を考えていないアドオンや、既にインストール済みのアドオンの場合は、率直にcscart_privilegesテーブルにINSERTをかましてOKです。cscart_privilegesテーブルに権限項目を増やすと、すぐに「権限」に追加した項目が現れます。まだ翻訳がないので、翻訳を追加しておきます。\n管理者(A)向けのコントローラ権限を宣言する前述のとおり、管理者は「デフォルトでなんでもできる」というポリシーなので、グループの権限設定によって管理者のアクセスを拒否するには、アドオン側で宣言する必要があります。宣言は、app/addons/[addon-id]/schemas/permissions/admin.post.phpファイルで行います。下記はその例で、hogehogeコントローラへの権限は、権限項目manage_hogehogeを参照しますよ、という意味になります。コントローラ名はURLのdispatchパラメータで渡ってくる文字列のドット以前のものです。上の例は、hogehogeコントローラ全体の権限になりますが、コントローラにはmode(add, update, delete, manageなど)が生えている場合があり、モードごとに権限制御することもできます。下のコードがその例です。\n出品者(V)向けのコントローラ権限を宣言する前述のとおり、出品者はデフォルトで「なにもできない」がポリシーです。従って、出品者は一切アクセスできなくてよい場合は、何も宣言しなくていいです。一方で、出品者もユーザグループの権限設定でアクセスを制御したい場合は、宣言が必要です。宣言方法は、管理者と似ていますが、ファイル名が違います。app/addons/[addon-id]/schemas/permissions/vendor.post.phpが出品者向け権限宣言の場所です。また、宣言のschemaの構造も違います。(調査時に、微妙な違いに時間をとられて「なんでや!」と突っ込みたくなりました…)下記の例は、hogehogeコントローラへのアクセスをすべて許可するという宣言です。一見すると、グループの権限設定を無視ししてアクセスできそうですが、CS-Cartはvendor.post.phpの宣言で制御して、アクセス可能とわかったら次にadmin.post.phpでの宣言も考慮するので心配はいりません。逆をいえば、admin.post.phpで宣言をしていない場合、アクセスし放題になります。モード単位のアクセス制御もできます。\nschemasを追加したらキャッシュのクリアが必要admin.post.phpもvendor.post.phpも、すべてRegistryのキャッシュに乗るので、ファイルを追加した場合はキャッシュのクリアが必要です。管理画面の「一般設定」→「ストレージ」→「キャッシュのクリア」もしくはコマンドで消します。",
    "http://qiita.com/suin/items/ceeddf41ba201322107a": "CS-Cart: Smartyプラグインを追加する方法。CS-CartのテンプレートエンジンはSmartyですが、Smartyはヘルパー(プラグイン)を追加することができます。ここでは、CS-CartでSmartyプラグインを追加する方法を紹介します。また、Smartyのプラグインの実装方法は割愛します。\nアドオンにSmartyプラグイン置き場を作る場所は特に決まりはないのですが、app/addons/$addon_id/functions/smarty_pluginsにします。\nフックを設定するテンプレート初期化フックにかんで、Smartyプラグインを登録するコードを実装します。\nSmartyプラグインを実装する最後にSmartyプラグインを実装したファイルを、プラグイン置き場に置いて完成です。",
    "http://qiita.com/suin/items/27d5b40d6d74dc4ce06b": "CS-Cart:管理画面にメニューを追加する方法。CS-Cartで管理画面にメニューを追加する方法です。CS-Cartでは、いろいろな場所にメニューを追加できますが、今回は注文や商品があるメニューに追加する方法を紹介します。まず、アドオンにメニュー定義ファイル menu.post.php を作成します。このファイルはCS-Cartに自動的に読み込まれるので、置くだけでOKです。変数$schemaが渡ってくるので、ここに足したいメニューを追加します。$schema['central']は灰色のメニューの配列です。灰色の部分にメニューを足したい場合は、これに要素を追加します。翻訳は$schema['central']['foo']のfooや$schema['central']['foo']['items']['bar']のbarに名前で対応したものを用意します。",
    "http://qiita.com/suin/items/244ec49a391f974270a3": "Sabel: リダイレクト。PHPフレームワーク Sabelでリダイレクトする方法",
    "http://qiita.com/suin/items/c3741b29c48f44d86f26": "Sabel: Formを使ったModelの追加保存方法。",
    "http://qiita.com/suin/items/f0e612a42a44c83c96a6": "Sabelでビューを追加する。たとえば /foo/barというURLにビューを追加する場合、コントローラを作ってからビューテンプレートを作ればいいようだ。",
    "http://qiita.com/suin/items/b01eebc05209dba0eb3e": "PHP: GDで画像のサイズ変更やサムネイル生成のやりかた。GDを使う動機のひとつとして、ImageMagicが使えないけどGDが入っているような環境で、画像のサイムネイルを作ることがありますが、APIが分かりにくく結構面倒な作業になります。幸いにもPHPには、ImagineというGDやImageMagicのAPIを抽象化して画像を処理できるライブラリがあります。が、サムネイル生成にImagineでは元画像の解像度が大きくなればなるほど、メモリの消費量が増えていくという欠点があり、1000x1000のこの画像を500x500にリサイズするだけで13.75MB消費します。従って、解像度の高い画像のサムネイルの作成については、直にGDのライブラリを使ったほうがメモリの消費を30〜50%くらい抑えられます。ImagineとGDのメモリ最大消費量\n画像のサイズを変形する関数サムネイル作成のコードを一気に書く前に、画像のサイズを変形するだけの関数を実装しておくと便利です。この関数はアスペクト比の計算を気にしないので、実装時や改修時に混乱しにくて良いです。\nアスペクト比を計算するアルゴリズム次にアスペクト比を計算するアルゴリズムを実装します。いろんなアルゴリズムがあると思いますが、ここで紹介するのは内接サイズを計算するアルゴリズムになります。こんな感じで、コンテナのサイズから、最適な内接サイズをタプルで返します。\nサムネイルを作る関数を実装する最後に、上の2つの関数を組み合わせてサムネイルを作成する関数を実装します。\nおわりGDを使って画像のサイズ変更・アスペクト比を維持したサイムネイル画像の生成方法を紹介しました。もうPHPで画像処理するのはやめたいです(´・ω・｀)",
    "http://qiita.com/suin/items/cf348b08b6023b7638b2": "CS-Cart: エラーをログに出したり、Slackに通知したりする。CS-Cartはアーキテクチャがしっかりしていないというか、10年くらい前のアーキテクチャというか、とにかくフレームワークの作りがゆるいので、改修していると今時当たり前の仕組みが無かったりする。その1つが、エラーの通知。CS-CartでFatalエラーやExceptionが発生しても、開発者は知るすべがない。致命的なエラーになると、ユーザには下のような画面が表示され、HTMLのソースコードにコメントでエラー情報が出力されるが、顧客から連絡がないと発見することができず、後手後手になってしまう。\nCS-CartはエラーをどうハンドリングしているかCS-Cartがエラーをどう処理しているかだが、DEVELOPMENT環境かどうかで挙動が違う。まず、DEVELOPMENT環境ではない いわゆる本番環境では、次の処理をしているDEVELOPMENT環境では、これに加えて、くらいはやっている。ソースコードをgrepしてみたが、exception handlerは使っていないので、Exceptionが発生してcatchされないと画面が真っ白になる。\nCS-Cartでエラーをログに出す方法CS-Cartならhookを使ってエラーハンドリングしたいところだが、エラー処理部分には残念ながらフックがない。したがって、エラーを捉える処理を実装しないとならない。と言っても難しいことはなく、set_error_handler, set_exception_handler, register_shutdown_functionでエラーハンドラをバインドしておけばいい。どこに、エラーログの処理を書くか悩ましいが、とりあえずlocal_conf.phpに書いておけばよいかと思う。set_error_handlerは1プロセスに1個しか登録できないのがPHPの仕様だが、CS-CartはDEVELOPMENT環境でないと、set_exception_handlerを使わないので気にせず登録してしまってOK。register_shutdown_functionはPHPの仕様上、複数登録できるので問題ない。set_exception_handlerはそもそも使われていないので、登録してしまって構わない。\nSlackにエラーを通知する方法PHP: Slackにメッセージを投稿するクラス - Qiitaを使って、Slackにエラーを投げるようにする。エラーをログにとるなら、エラーの文脈もあるとデバッグしやすいので、つけておく。",
    "http://qiita.com/suin/items/b647aed3dfcaf9755270": "PHP: Slackにメッセージを投稿するクラス。使い捨てなのでメモ程度に投稿します…。\n使い方単に例外だけだと対処できないケースがあるので、ユーザIDなども合わせて送れます。\nSlackにメッセージを投稿するクラス\n関連",
    "http://qiita.com/suin/items/5347e92371741c2d29c6": "wgetでページとそれに付随するCSS・JSなどを保存する。wgetでひとつのページとそのページが使っている画像・CSS・JSなどのアセットも同時に保存する方法です。\nパラメータの説明\nダウンロードしたファイルの確認方法ダウンロードしたファイルを確認するには、index.htmlを開く方法もありますが、google fontsなどCDNに依存しているHTMLだとエラーになるので、ダウンロードしたindex.htmlがある場所でPythonのSimpleHTTPServerを立てて、http://localhost:4000などにアクセスし確認するとよいです。",
    "http://qiita.com/suin/items/e33af700ceb678d40a67": "サーバサイドpush技術としてのWebsocketとServer-sent eventsの特徴比較。サーバサイドpush技術として見たときのWebsocketとServer-sent events(SSE)の特徴を整理したい。\nブラウザのサポート状況\n既存の開発スタックとの親和性\nサーバから送れるデータ\nチャネル\n制約面\nセキュリティ面\n後で検討したいこと気づいたことがあれば追記していきたい。",
    "http://qiita.com/suin/items/e449061145466774660c": "glueコードを分離したjQueryのプラグイン作成方法。jQueryのプラグインを作ろうと思うと、jQueryにプラグインを登録するコードが思い出せなくて、いつもググってしまう。というのも、jQueryプラグインの作成には、お決まりのボイラープレートコードを何行か書かないといけない。普通にjQueryプラグインを作ろうとすると、プラグインの実装はボイラープレートコードに埋もれてしまう。だいたいこんな感じの実装になって、どこがjQueryとのglueコードで、どこがプラグインのロジックなのか分かりにくいし、こうしたコードだと数カ月後に新しいプラグインを作るときに、コピペしてどの部分を書き換えたらいいか考えないといけない。jQueryに明示的なプラグイン登録APIが用意されていないため、こうした問題が起こる。\nglueコードを分離したjQueryのプラグイン実装こうした問題を手っ取り早く解決するために、jQueryとのglueコードとプラグインの実装を分けてコーディングするようにする。下のコードはaddPlugin関数がjQueryにプラグインを登録するための関数で、glueコードを隠蔽する。プラグインの実装は普通の関数にでき、addPluginにその関数を渡してjQueryと結合することができる。たとえば、文字色を変えるプラグインなら次のような感じのコードになる。このコードをCodePenで実行してみるちなみに、当然ながらプラグインを使う側のコードは、普通のプラグイン実装方法との違いは意識しなくていい。",
    "http://qiita.com/suin/items/a46d3fe7f3623c47a5a1": "【27言語まとめ】マイナンバーのチェックデジット計算方法。マイナンバーのチェックデジットの計算方法の各言語実装例をまとめました。追加があれば、コメント等でお知らせください。\n計算方法マイナンバーのチェックデジットの計算をわかりやすく解説 - Qiita\nAgdaAgda - 【速報】マイナンバーの全域性とチェックディジットの一意性が証明された！？ - Qiita\nCマイナンバーのチェックデジットの検算をざっくり1割くらい高速化する(計ってないので知らんけど) - Qiita\nC++C++でマイナンバーのチェックデジットを計算する - QiitaC#でマイナンバーのチェックデジットを計算する - YDiary\nC♯C#でマイナンバーのチェックデジットを計算する - QiitaWindowsPowerShell & C#マイナンバーのチェックデジットを計算する - Qiita\nCrystalマイナンバーのチェックディジットをCrystalで計算する - Qiita\nBashマイナンバーのチェックデジットの検算をざっくり1割くらい高速化する(計ってないので知らんけど) - Qiita\nDdlang - D 言語でコンパイル時にマイナンバーの妥当性をチェックするテンプレート - Qiita\nElixirElixirでマイナンバーのチェックデジットを計算する - Qiita\nEmacs Lispsyohex/emacs-mynumber: Mynumber validation in Emacs\nGoマイナンバーのチェックデジットをGoで計算する - Qiita[メモ] 各種チェックデジットの計算方法 - Qiita\nGroovyJavaScriptとGroovyでマイナンバーのチェックデジットを計算する - Qiita\nHaskellHaskellでマイナンバーのチェックデジットを計算する - QiitaHaskell - マイナンバー数字列の確認 - Qiitaマイナンバーのチェックデジットを Haskell で計算してみる - Qiita\nKotlinKotlinでマイナンバーのチェックディジットを計算する - Qiita\nJavaマイナンバーのチェックデジットを計算する（Java編） - Qiitaマイナンバーチェックデジット用Javaコード - Qiita\nJavaScriptマイナンバーのチェックデジットを JavaScript で計算する - QiitaJavaScriptとGroovyでマイナンバーのチェックデジットを計算する - Qiita\nObjective-CマイナンバーのチェックディジットをObjective-Cで計算する - Qiita\nOCamlOCaml でマイナンバーのチェックデジットを計算する - Qiita\nPerlPerl5,Perl6でマイナンバーのチェックデジットを計算する - Qiita[メモ] 各種チェックデジットの計算方法 - Qiita\nPHPマイナンバーのチェックデジットを計算する PHP版 - Qiita\nPythonPython マイナンバー検証用モジュールを公開 - Qiita[メモ] 各種チェックデジットの計算方法 - Qiita\nRubyRuby - マイナンバーのチェックデジットを計算する - Qiita[メモ] 各種チェックデジットの計算方法 - Qiitaマイナンバーを検証する gem を作った - Qiita\nRustTomohiro/mynumber\nSQLマイナンバーのチェックデジットを計算する（SQLで） - Qiita\nScalaマイナンバーのチェックデジットをScalaで計算する - Qiita\nSchemeScheme(Gauche)でマイナンバーのチェックデジットを計算する - QiitaScheme (R7RS+SRFI) でマイナンバーのチェックデジットを計算する - Qiita\nSwiftマイナンバーのチェックデジットをSwiftで計算する - Qiita\nTeXTeXで簡単プログラミング♪ - ０番染色体\nVim Scriptmattn/vim-mynumber - VimLBig Sky :: Vim からマイナンバーを検証出来るプラグイン書いた。\nWindowsPowerShellWindowsPowerShell & C#マイナンバーのチェックデジットを計算する - Qiita\nダミーデータmemo - テスト用マイナンバーのダミーデータ - Qiita",
    "http://qiita.com/suin/items/f559e3dcde7c811ed4e1": "DDD: ImmutableなEntityの実装方法〜ステートソーシングなEntityとイベントソーシングなEntity〜。ドメイン駆動設計では、Value ObjectはImmutable、EntityはMutableという雰囲気があるように思うが、ScalaでDDDを実践しようとなると、EntityがMutableでは逆に実装が複雑になることが多い。僕がDDDを始めた2013年頃は、ImmutableなEntityの実装に関する情報がほとんどなく実装方法を試行錯誤していた。その中で、個人的にImmutable Entityの実装方法が落ち着いてきたので、僕がどのように実装しているかについて紹介したい。なお、ここで紹介するScalaコードはGitHubのsuin/scala-playgroundで公開しているので、コンパイル・実行など試してみたい場合はご活用ください。\nEntityのふたつの実装方法Entityを実装する方法は2つある。ひとつはState Sourcing、もうひとつはEvent Sourcingだ。どちらもEntityの永続化の方法で、State SourcingはEntityの状態を永続化する。EntityをORMでマッピングしてMySQLなどのDBに保存する方法だ。取り出すときもORMを介して、Entityのインスタンスを再構築する。一方のEvent Sourcingは、Entityの状態は保存せず、Domain Eventだけを時系列で永続化する。取り出すときは初期状態のEntityにこのDomain Eventを適用していくことで、最新の状態まで復元する。ここでは、State SourcingとEvent Sourcingそれぞれを念頭においたEntityの実装方法を紹介する。紹介するに当たって、ホテルの部屋予約ドメインを例にする。\nホテル部屋予約ドメインここでのホテル部屋予約ドメインとは、宿泊客が滞在したい部屋の予約やキャンセルができ、ホテルのスタッフが部屋の予約状況やチェックイン・チェックアウトを管理するドメインのことを言う。実際は、もっと複雑な業務があるが、サンプルでは複雑にならないよう簡略化して説明する。\n主な動詞ドメインモデルの設計で真っ先に着目するのはドメインの動詞だ。部屋予約ドメインの主な動詞を整理すると、ざっくり4つの動詞が記述できる。この動詞をヒントに、Entityの操作やDomain Eventを実装していく。\n主な名詞ドメインの動詞が決まると自ずと名詞が決まる。名詞はEntityやValue Objectの名前になる。\nState Sourcingでの実装方法話がドメインの分析にそれてしまったが、ここからは本題のState SourcingでのImmutableなEntityの実装方法を紹介する。まず、分析した名詞をたよりにValue Objectを定義する。次に予約のEntityを定義する。Entityはcase classにしておくと、ScalikeJDBCやSlickなどのORMとの相性が良くなる。case classにしてあるので、インスタンスの生成はScalaではval r = Reservation(...)で作ることができるが、ユビキタスランゲージを強調するためにあえてコンパニオンオブジェクトにreserveというFactory Methodを定義している。宿泊客や部屋もEntityと考えられるが、予約からは他のEntityを直接参照せず、identityで参照するようにする。なお、今回は予約以外のEntityの実装は割愛する。EntityをImmutableにするために、reserve, checkIn, checkOut, cancelの各関数は新しいReservationを返せるインターフェイスにする。各関数の実装は次のようになる。以上が、State SourcingのEntityを実装する方法だ。ドメインのクライアントコードでは、次のようにEntityをImmutableとして扱うことができる。\nEvent Sourcingでの実装方法ここからはEvent SourcingなEntityの実装方法を紹介する。イベントソーシングでも同様にValue Objectを定義する。次に、ドメインの動詞から対応するDomain Eventを定義する。続いて予約Entityを定義する。インターフェイスを先にお見せすると、次のようになる。State SourcingではEntityへのコマンド関数は新しい自Entityを返すだけだったが、Event SourcingではDomain Eventの生成が必須になるため、上コードの(1)の部分では新しい自EntityとDomain Eventをタプルで返すようなインターフェイスになる。Event SourcingなEntityでは、新しい自Entityの生成は、全てイベントを適用するのを経て行われる。したがって、どうしても空っぽのEntityを一時的にでも作れるようなインターフェイスが必要になる1。(2)の部分はそのためにある。例えば、Repositoryで空っぽのReservationを作り、RoomReserved・GuestCheckedIn・GuestCheckedOutの順でイベントを適用していき、最新のReservationを復元するような処理を書くときに使う。より具体的なリポジトリの実装は、DDD - インフラレイヤがドメインレイヤのリポジトリに依存する実装方法 - Qiitaでちょろっと見せてます。(3)はEntityにDomain Eventを適用するAPIだ。メソッド名はdef applyEvent(...)のようなネーミングでも構わないが、+にすることで、という理由から+を好んで使う。(4)は見てのとおり、EntityにEventを適用して、EntityとEventのタプルを返す関数だ。これは、Entity内でコピペコードを減らす目的で実装する。この関数は必須ではないがあると便利である。なお、&をメソッド名にしているのも、+同様にドメインモデルに余計な単語を出さない目的があるのと、メソッドを定義したときに、式がdef command = Entity and Eventになり、「EntityとEventのセットなんだな」とコードが表現的になるためこの記号をよく使う。Entityの実装を埋めると、次のようになる。以上でEvent SourcingなEntityの実装が完了となる。Entityを操作する側のコードは次のようになる。\nおわりScalaでImmutableなEntityを実装する方法を、State SourcingとEvent Sourcingにわけて紹介した。自分はこんな風に実装しているよ、というのがあればご紹介いただければと思います。もしこれを省略できる方法があればご教授くださいm(_ _)m ↩",
    "http://qiita.com/suin/items/a325fe97905ae5e1f6ba": "CS-Cart: 通知関数fn_set_notificationの使い方。CS-Cartでは、処理の成功・失敗などをUIにフィードバックできる通知(notification)の機構がある。Ruby on Railsなどのフレームワークでよく見かけるflash的なものだ。この通知は、fn_set_notificationを実行すると使うことができる。\nfn_set_notification\n通知関数の引数などは次のようになっている。\nサンプル",
    "http://qiita.com/suin/items/aa44e7482694b2855d39": "Scala:メソッドのポリモーフィズム。scalaの多相いろいろ - おみブロZという素晴らしい記事を参考に、メソッドのポリモーフィズムの実装パターンを自分なりにまとめてみる。まず、「メソッドのポリモーフィズム」という言葉が一般的でないかもしれないので、この記事での意味として、「引数や戻り値の型が異なる同名のメソッドを実装する方法」としておく。また、ここで例示する記事は、GitHubのsuin/scala-playgroundに置いてあるので、試したい方はgit pullしてみてください。\nメソッドのオーバーロードオーバーロードはJavaなどにもある仕組みで、引数の型が違う場合、同じ名前のメソッドを定義できる。アドホック多相(Ad hoc polymorphism)。\n継承(Commandパターン)オブジェクト指向言語で見かけるデザインパターン。サブタイプ多相(Subtype polymorphism)。\nPimp my Library PatternScalaの暗黙の型変換を使って、クラスにメソッドを追加する方法。\nMagnet Pattern (implicit parameter)型クラス + Dependent Method Types + implicit parameterで実現するMagnet Pattern。\nMagnet Pattern (implicit conversion)型クラス + Dependent Method Types + implicit conversionで実現するMagnet Pattern。\n参考",
    "http://qiita.com/suin/items/e5b966550427f1fb4680": "Scala: PartialFunctionはsealedのexhaustiveチェックがない。ScalaのPartialFunctionはsealedのパターンマッチング漏れチェックがコンパイル時に行われないので注意が必要ということに気がついた。次のようなコードで、わざとパターンマッチングの漏れを作ってコンパイルすると、toLowerCaseF1とtoLowerCaseF3はコンパイルがwarning: match may not be exhaustiveを警告してくれるが、PartialFunctionを使ったtoLowerCaseF2については何も言ってこない。",
    "http://qiita.com/suin/items/cb70e6cbf8bfe0705153": "CS-Cart: AddonのJavaScriptをリロードで反映するようにする。CS-Cartでは、全ページでJavaScriptを読み込みたいでも紹介したとおり、AddonにJavaScriptを持たせることができ、scripts.post.tplで読み込むことで全てのページにAddonのJavaScriptをロードすることができる。しかし、デフォルトの設定ではJavaScriptのコードを更新しても、「一般設定」→「ストレージ」→「キャッシュのクリア」をしないとJavaScriptは最新にならない。これは、CS-CartがJavaScriptをコンパイルして1つのJSにminifyする仕組みを取っているため。JavaScriptの更新をリロードだけで反映するには、config.local.phpやlocal_conf.phpでtweaks.dev_jsをtrueに設定しておく必要がある。これを設定しておけば、JSファイルを更新しただけで反映されるようになる。",
    "http://qiita.com/suin/items/fc720e2994ed022e0b63": "CS-Cart: ステータスを表示だけする方法(選択・変更できないようにする)。CS-Cartで「有効」「無効」などのステータスを選択するコンポーネントにcommon/select_popup.tplというものがある。おなじみの下の図のようなものだ。このコンポーネントの引数に、non_editable=trueを加えると、選択できないようにしつつ、現状のステータスの文言を出すようにすることができる。",
    "http://qiita.com/suin/items/fbbdf0bb099560f1dcc6": "Scala: sealed traitでもoverride methodの同一視はできないっぽい？。sealed traitならoverrideしたメソッドの同一視くらいできそうかなと思ったが、コンパイラはそこまで見てくれないようだ。この程度のコードならmatchを使えば解決するけれど、やりたいことはclassのhandleCommandではそれぞれ別の型を戻り値に明示する、かつ、objectのhandleCommandでは全てのhandleCommandを同一視することで、ざっくり次のようなコードを実現したい。何かいい方法はないものだろうか。",
    "http://qiita.com/suin/items/b3d32659bb054eb566f3": "Scala:ドメインイベントのバージョンを型で表現するアイディア。イベントソーシングでAggregate Rootを再構築するようなアーキテクチャだと、イベントの進化(Evolving events)がどうしても問題になってくる。Domain Eventの属性が増減したり、リファクタリングでリネームされたり等。イベントソーシングでは、イベントストアは不変ということで、一度登録したイベントは書き換えない1。Event Upgraderなどをアプリ側に組み込んで、イベントを最新のバージョンに上げていくような実装になってくる。前提として、イベントが最新かどうかを判断するためには、イベントのバージョンもイベントストアに記録されてないといけない。真っ先に思いついたのが、Domain Eventの属性に持たせてしまうというもの。これでもいいのだけれど、といった課題があった。こういった課題を解決するためのアイディアとして、イベントバージョンを型で表現する方法を検討している。Domain Eventインスタンスのイベントバージョン確認方法変えずにこしたことはないが、業務上やむを得ないときはイベントストアを改ざんするのもありだというのが個人的な考え。 ↩",
    "http://qiita.com/suin/items/143d50f2d8b455394daa": "CS-CartのSQLプレースホルダの挙動。CS-Cartには自前のSQLプレースホルダがあるが、その中で挙動が気になったものをまとめる。プレースホルダの概要については本家ドキュメント『Using Placeholders to Build Database Requests — CS-Cart 4.0.x documentation』を参照。\nDB接頭辞 ?:\n\nInteger ?i\nIntegerといいつつ、doubleはそのまま通ってしまうので注意。内部的には+ 0しているだけ\nString ?s\nクォーテーションをエスケープしてくれる。\nLIKE用String ?l\nMySQLのLIKEではバックスラッシュを二重しないといけないが、これを面倒見てくれる。\nDouble ?d\n小数点第二位で丸める。見た感じ五捨六入？\nArray(IN句用) ?a\nArrayだけでなくスカラー型も受け付ける。空の配列が渡ってくると、Deprecatedエラーが出るがSQLは実行される。\nNumbers (IN句用) ?n\n?aと同じくIN句用のプレースホルダだが、数値の配列に変換される。",
    "http://qiita.com/suin/items/23f31f580f9c5d8ab2f3": "jQuery:子要素をスクロールしている間は、ページ全体のスクロール無効化する。子要素をスクロールできるUIで、その要素をスクロールすると勢いづいて、ページ全体までスクロールしてしまうことがある。たとえばこんな感じに…子要素をスクロールしているときは、ページ全体のスクロールを無効にする方法はいろいろ考えられるが、今回はjQueryで対応する方法を紹介する。デモ: jQuery - 子要素をスクロールするときは、ウィンドウをスクロールしないようにする例スニペットの内容を簡単に説明すると、子要素.prevent-window-scrollのmousewheelイベントにかんで、マウスホイールが回ったときに一旦<body>のCSSにoverflow:hiddenをセットすることでページ全体のスクロールを無効化する。その後、200ミリ秒経過したら、<body>のoverflow:hiddenを取ってやるようにしている。",
    "http://qiita.com/suin/items/0d3e970c4d607bb1ad8a": "CS-Cart: 全ページでJavaScriptを読み込みたい。CS-Cartでページを横断するようなAddonを作っていると、JavaScriptを全ページで読み込みたいことがある。ここでは、AddonのJavaScriptをCS-Cartのbackendの全ページで読み込む方法を紹介する。まず、全ページで読み込むJSを作成する。ファイル名は好きなようにつけて構わない。JSファイルはjs/addons/{アドオンID}/ディレクトリに作成する。CS-Cartでは、全ページでJSをロードできるようにテンプレートフックindex:scriptが用意されているのでこれを活用する。まずテンプレートフックにかむテンプレートindex/scripts.post.tplを追加する。読み込まれているかを確認したいので、テンプレートの中身はデバッグ用にアラートを出すコードを差し込んでおく。ここまでできたら画面をリロードして、アラートが出れば読み込みOK。最後に、目当てのJSがロードされるように、テンプレートを書き換える。変更を適用するには、「一般設定」→「ストレージ」→「キャッシュのクリア」をしないとならない。これが面倒な場合は、AddonのJavaScriptをリロードで反映するようにする設定をしておく。ちなみに、この{script}タグやAddonのJS同梱等についてはCS-Cart: AddonにJSやCSSファイルを同梱する - Qiitaを参照。",
    "http://qiita.com/suin/items/431f8baa879ecf7c7a7b": "CS-Cart: デバッグ用にメールの送信先を固定する。CS-Cartで開発時や検証時に、CS-Cartから送信されるメールを一箇所に送りたいことがある。ここではその実現方法を紹介する。前提として、CS-CartのPHPフックを使うので、適当なAddonを作っておく。\n使うフック\nフック関数の実装\n送信先固定はconfig.local.phpに定義するもしくは、local_conf.phpに定義する。\n送信先固定が効いているかを管理画面で確認できるようにするディスパッチのフックに噛んで、通知を表示する。",
    "http://qiita.com/suin/items/74da5ae648389ce94413": "CS-Cart: installディレクトリの削除をgitで無視する。CS-Cartはインストールすると、installディレクトリが削除されてしまう。installディレクトリもGitで管理はしたいが、プロダクション環境では削除は無視したいということがある。この場合、installディレクトリが削除された後に、git update-index --assume-unchangedで変更を無視するように設定するといい。まず、下記コマンドで無視するファイルのリストを確認しておく。そのリストで問題なければ、下記コマンドで更新を無視するように設定する。この設定は、git cloneしてきたその環境でのみ有効なので、デメリットとしてはインストールする度に設定する必要があるが、メリットとしてはコードベース(リモートのmasterなど)に影響しないという点がある。",
    "http://qiita.com/suin/items/903a4cbc29d785fb8936": "react-native: キーボードを開くと入力欄が隠れる問題の解決法。React Nativeの<TextInput>にフォーカスが当たると、iOSではキーボードが下から上がってきてUIの上に重なるが、React Nativeは入力欄が画面上に見える状態で表示されていることまでは面倒を見てくれない。たとえば、入力欄が画面の最下部にあるようなUIでは、入力欄がキーボードですっかり隠れてしまう。解決策としては、コンポーネント側でキーボードの開閉イベントを受け取り、キーボードが表示されたとき、UIを上にずらすような処理をコーディングする。UIをずらす方法として、merginTopにマイナス値をセットする、heightを減少するといった方法を試してみたものの計算や調整が難しかった。最終的に行き着いたのは、キーボードと同じ高さの<View>を画面最下部に追加してやる方法。下のアニメーションはこの方法を実装したデモで、青い部分がキーボードと同じ高さの<View>になっている。このキーボード用スペースコンポーネントの実装は次のようになる。使い方は、ずらしたいコンポーネントの後ろにおくだけ。なお、アニメーションがiOSのキーボード出し入れの速度と違うが、React Nativeが提供しているeasingカーブにiOSの\"keyboard\"相当のものがないためこうなってしまう。React NativeのAnimatedではeasingカーブをカスタムすることもできるので、気になる場合は微調整してみてください…。",
    "http://qiita.com/suin/items/650143af5796570b4495": "PHPでvar_dumpの結果をログなど画面外に出力する関数。PHPのvar_dumpはApacheなどであれば、レスポンスに出力されてしまい、Ajaxのサーバ側のデバッグがやりにくい。JavaScriptのconsole APIのように、PHPにも画面外に出力するAPIが欲しいところ。無いので実装してみた。もっとも手軽なのはfile_put_contents('...', var_export($val, true))だが、インスタンスが__set_stateとして表示されたり、再帰参照はエラーになったりと、デバッグには使い勝手が良くない。var_dumpを使うとなると出力を一旦受け止めないといけないので、Output Bufferを使うことになる。次の実装がシンプルな例。ただこの実装では、var_dumpの出力結果がメモリ上限に達すると何も出力されなくなってしまう問題がある。\nこの問題に遭遇したら、ob_startの第一引数に関数を指定して、バッファに貯めずにログに出力するといった回避策もある。あと、お好みでこのログ関数に、コール元の情報を追加してもいいかも。",
    "http://qiita.com/suin/items/ca786e0f74c486be78fc": "react-native: width: 100%は効かない。React Nativeではwidth: 100%が効かない。\n代わりの方法\nFlexを使う\nposition: 'absolute'などでFlexが使えない場合",
    "http://qiita.com/suin/items/c7475c32373d52abfe4a": "react-native: zIndexがサポートされていない。React NativeはzIndexがサポートされていないので、コンポーネントの順番で対処することになる。より前面に出したいコンポーネントは後のほうに置く。",
    "http://qiita.com/suin/items/11bc54af2163dd5af2bf": "CS-Cart: 翻訳の文中に変数を使う。CS-Cartで翻訳の文中で変数を使いたい場合、カギカッコを使う。Smartyテンプレートでは、変数は第二引数に値を指定する。出力結果",
    "http://qiita.com/suin/items/66fd40acd8a69dae2c61": "CS-Cart: アドオンの画像を配置する場所と画像の表示方法。CS-Cartのアドオンで使う画像はどこに配置したらいいか？また、テンプレートでどうやって画像を表示するか？についての説明。\nアドオンの画像を配置する場所管理画面用の画像:\nアドオンの画像をテンプレートで表示する方法{$images_dir}を使う。この変数はエリアによってパスが変わる。例えば、backendならhttp://example.com/design/backend/media/imagesのようになる。",
    "http://qiita.com/suin/items/e0048304e9d7c1970da6": "CS-Cart: 現在ユーザのユーザ情報を取得する。CS-Cartで現在セッション中のユーザを取得するには、Registryから取ってくる。",
    "http://qiita.com/suin/items/6dd87cec8c0d949602f9": "CS-Cart: ユーザ名でログインできるようにする。CS-Cartではユーザ名とパスワードでログインすることができたようだが、4.3.1からはメールアドレスのみで認証するようになったようだ。一応、usersテーブルにはuser_loginカラムというそれらしいものがあるが、認証には使われていない。Unfortunately, the usernames are not supported since 4.3.1 Login With Email/username - General Questions - CS-Cart Community Forumsユーザ名とパスワードしかユーザマスタに持ってない古いシステムからCS-Cartに乗り換える場合、これが意外と障壁になる。\nCS-Cartはどこで認証しているか？app/functions/fn.users.phpのfn_auth_routines関数が認証の処理だが、残念ながらPHPフックはない。したがって、直接コアのコードを修正する外ない。\n修正する箇所まず、fn_auth_routines関数の下記の部分を見つける。その後ろに、下記のような行を追加するこれだけだと、ログインフォームでメールアドレスの書式チェックが走ってログインできないので、テンプレートも変更する。下記部分のcm-emailを消すと、メールアドレスのバリデーションが無効になる。また、「Eメール」という表示を「ユーザー名」にしたいので、__(\"email\")は__(\"username\")に置き換える。",
    "http://qiita.com/suin/items/2b553643ac798f5bcda2": "CS-Cart: CSRF対策のsecurity_hashを取得するAPI。CS-CartでCSRF対策に用いられるsecurity_hashの取得方法。fn_generate_security_hashの実装を見る限り、CSRFトークンは使い捨てのワンタイムトークンではなく、セッションごとに作られる。つまり、セッション単位なら使い回しが可能。",
    "http://qiita.com/suin/items/8d90cc777d127cc38edb": "CS-Cart: コントローラにPOSTするために最低限必要なリクエスト。CS-Cartは素のリクエストを受付けてくれない。最低限必要なリクエストは下記。httpieで実行するときはこんなかんじになる。jQueryのAjaxならこんなかんじ。\n関連CS-Cart: CSRF対策のsecurity_hashを取得するAPI - Qiita",
    "http://qiita.com/suin/items/ed5fda742593f317a8b0": "CS-Cart: AddonにJSやCSSファイルを同梱する。CS-CartでAddonが使うJSファイルを同梱する方法。\nAddonのJS置き場js/addons/[アドオンID]がアドオン固有のJS置き場になる。\nAddonのJSを読み込むテンプレート側で読み込むだけだが、script関数が提供されているのでそれを使う。viewテンプレートなら、mainboxの中で読み込む。hookテンプレートなら、どこに書いてもいい。\nAddonのCSSファイル置き場管理画面(backend)はdesign/backend/css/addons/[アドオンID]/[ファイル名].cssに配置する。\nAddonのCSSを読み込むこれもJS同様にテンプレートで読み込むが、style関数を使う。",
    "http://qiita.com/suin/items/6a0f8323eaa6eac67aca": "CS-Cart: Addonでコントローラを追加して管理画面を作る。CS-Cartの自作Addonでコントローラを追加して、管理画面(backend)を追加する方法。\nCS-CartではURLとコントローラがどう対応しているか？上のURLは下のコントローラに対応する。コントローラ名はグローバルなので、dispatchパラメータにはアドオン名が含まれない。\nモード名は、コントローラのファイルで自動定義される$mode変数に入ってくるので、ファイル名には出てこない。例えば、http://example.com/admin.php?dispatch=my_controller.updateにアクセスしたら、インストールされているアドオンからmy_controller.phpを探してきて実行される。\nコントローラを作ったのに404になるのですが？コントローラを作っただけでは、CS-Cartは404エラーを返す。これはviewテンプレートがないため。テンプレートを作るとエラーが解消される。テンプレートのファイル名はとなる。",
    "http://qiita.com/suin/items/69e2aacaba001cd5485f": "CS-Cart: 出品者(vendor)に管理画面のコントローラアクセス権限を与える。CS-Cartでは、デフォルトでは出品者(vendor)はAddonのコントローラにアクセスすることができない。アクセスしようとすると、403エラーになる。アドオンのコントローラに対してアクセス権限を与えるには、パーミッションファイルを設置する必要がある。例えば、app/addons/myaddon/controllers/backend/my_controller.phpをアクセス可能にする場合は、次のような設定ファイルを作る。なお、権限設定ファイル追加したり更新したときは、レジストリのキャッシュをクリアする必要がある。CS-Cart: テンプレート・翻訳・Add-onの更新方法 - Qiita",
    "http://qiita.com/suin/items/c0827c71267cb8d3ebe7": "CS-CartのDBからデータを取得するAPIまとめ。CS-Cartのデータベースからデータを取得するAPIを紹介する。\narray db_get_array(string $query)戻り値の形式は連想配列の配列。\narray db_get_hash_array(string $query, string $field)特定のフィールドを連想配列のキーにして返す。キーがuser_idと同じことに注目。\narray db_get_row(string $query)一行だけ取得する。LIMIT 1を自動的につけるわけではないので、パフォーマンスを得たい場合はSQLにLIMIT 1も明示する必要あり。\nmixed db_get_field(string $query)最初の行の最初のカラムの値を返す。\narray db_get_fields(string $query)最初のカラムをすべて返す。\narray db_get_hash_single_array(string $query, array $params)第二引数で渡したKey-valueのタプルで連想配列を作って返す。\n関連CS-CartのSQLプレースホルダの挙動 - Qiita",
    "http://qiita.com/suin/items/69efe80b18138fe3984f": "MySQL: REPLACEは未指定フィールドがNULLに置き換わるのでON DUPLICATE KEY UPDATEを使う。MySQLのREPLACE構文は未指定のフィールドがNULLに置き換わる仕様なので、全フィールドの値を指定するか、一部だけ指定したい場合は、ON DUPLICATE KEY UPDATEを使うといい。\n検証用テーブルNullableなカラムを2つ以上持つテーブルを用意する。\n検証片方ずつREPLACEしてみる。今度はON DUPLICATE KEY UPDATEを使って片方ずつ更新してみる。",
    "http://qiita.com/suin/items/88a25fdc23450b8340ec": "CS-CartをInnoDB化してトランザクションもやる。CS-Cartをいじっているがアーキテクチャが古いせいか、MySQLのテーブルエンジンがMyISAMであり、したがってトランザクションは使っていない。トランザクションなしで複数のテーブルを同時更新しているわけだが、ショッピングカートのプロダクトとしていいのだろうか？せめて自分が作ったアドオンではトランザクションを使いたいので、InnoDB化したときどうやってトランザクションするかを説明したい。\nPre/Post Controllerを使ってBEGINとCOMMITを挟むようにするPre/Post ControllerはCS-Cartのコアのコントローラの前後に何か処理を実行する仕組みだ。詳細は、Pre- and Post- コントローラー · CS-Cart開発者ドキュメントを見ていただければと思う。前後ということは、これを利用するとコアの処理をBEGINとCOMMITで挟むことができる。一応、CS-Cartは更新が失敗すると例外を投げるので、PostコントローラのCOMMITには到達しない。\nPHPフックを使って、BEGIN/COMMITで挟むPHPフックが提供されているルーチンなら幸いだ。それを使うことができるし、呼び出される順番も指定できるので、ほぼ確実にCOMMITを全フックの最後にすることができる。この1や9999999は呼び出される優先度で、詳しくはCS-Cart: PHPフックで呼び出される優先度を指定する - Qiitaを参照。こうしたやり方は明らかにHackだが、コアにはできるだけ触れたくない場合はこうするしかない。",
    "http://qiita.com/suin/items/848998689e9dae351028": "CS-Cartでタイムスタンプを日付フォーマットにして表示する方法。CS-Cartの「基本設定」の「日付フォーマット」「時刻フォーマット」の設定値を使って、タイムスタンプをフォーマットする方法。",
    "http://qiita.com/suin/items/691a146fda0f7dc004d0": "CS-Cart: 日本語版は「姓」がfirst name「名」がlast nameになっている。CS-Cartの日本語訳は「姓」がfirst name「名」がlast nameになっているので注意。おそらく、入力欄の並びを考えて、あえて、First nameを「姓」、Last name「名」と翻訳していると思われる。氏名を表示するときは $firstname $lastnameの順で出すようにする。",
    "http://qiita.com/suin/items/7b251c65928489a277d3": "CS-Cart: PHPフックで呼び出される優先度を指定する。CS-CartにはPHPフックという機構があり、アドオンからコアの振る舞いを変更することができる。フックポイントにアドオンのコールバックを登録しておくと、そのコールバックが呼び出される。1つのフックポイントを複数のアドオンで共有するわけだが、コールバックには呼び出される順番がある。上記のように、フックポイントへの登録だけの場合、暗黙的にアドオンのpriorityがコールバック実行の優先度になる。アドオンのpriorityはaddon.xmlで宣言したものだ。場合によっては、他のアドオンよりも先に(あるいは最後に)コールバックを実行してほしいことがある。そうした場合には、フックポイント名とpriorityのタプルをfn_register_hooksに渡すことで、コールバックの優先度を明示することができる。",
    "http://qiita.com/suin/items/cf6892e0f6feef390de5": "docker-compose: MySQLのSELECT以外のクエリログを出したい。SELECTを除外するSELECT、SHOW、SETを除外する"
}